//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// A generic device designed to close, or open, or both, one or more electric circuits.
    public class Switch : ConductingEquipment {
        
        /// Used to define affiliation of switches to a feeder. This attribute should have the same value as feederID from exported FeederChangeSet. In specific situation when switch connects two feeders, this value can be different from feederID.
        private string cim_feederID1;
        
        private const bool isFeederID1Mandatory = true;
        
        private const string _feederID1Prefix = "tdms";
        
        /// Used to define switches between two feeders. In specific situation when switch connects two feeders, this value is populated, otherwise it is not populated.
        private string cim_feederID2;
        
        private const bool isFeederID2Mandatory = true;
        
        private const string _feederID2Prefix = "tdms";
        
        /// The attribute is used in cases when no Measurement for the status value is present. If the Switch has a status measurment the Discrete.normalValue is expected to match with the Switch.normalOpen.
        private System.Boolean? cim_normalOpen;
        
        private const bool isNormalOpenMandatory = true;
        
        private const string _normalOpenPrefix = "cim";
        
        public virtual string FeederID1 {
            get {
                return this.cim_feederID1;
            }
            set {
                this.cim_feederID1 = value;
            }
        }
        
        public virtual bool FeederID1HasValue {
            get {
                return this.cim_feederID1 != null;
            }
        }
        
        public static bool IsFeederID1Mandatory {
            get {
                return isFeederID1Mandatory;
            }
        }
        
        public static string FeederID1Prefix {
            get {
                return _feederID1Prefix;
            }
        }
        
        public virtual string FeederID2 {
            get {
                return this.cim_feederID2;
            }
            set {
                this.cim_feederID2 = value;
            }
        }
        
        public virtual bool FeederID2HasValue {
            get {
                return this.cim_feederID2 != null;
            }
        }
        
        public static bool IsFeederID2Mandatory {
            get {
                return isFeederID2Mandatory;
            }
        }
        
        public static string FeederID2Prefix {
            get {
                return _feederID2Prefix;
            }
        }
        
        public virtual bool NormalOpen {
            get {
                return this.cim_normalOpen.GetValueOrDefault();
            }
            set {
                this.cim_normalOpen = value;
            }
        }
        
        public virtual bool NormalOpenHasValue {
            get {
                return this.cim_normalOpen != null;
            }
        }
        
        public static bool IsNormalOpenMandatory {
            get {
                return isNormalOpenMandatory;
            }
        }
        
        public static string NormalOpenPrefix {
            get {
                return _normalOpenPrefix;
            }
        }
    }
}
