//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FTN {
    using System;
    using FTN;
    
    
    /// An electromechanical device that operates synchronously with the network. It is a single machine operating either as a generator or synchronous condenser or pump.
    public class SynchronousMachine : RegulatingCondEq {
        
        /// Active power consumed when in condenser mode operation.
        private System.Single? cim_condenserP;
        
        private const bool isCondenserPMandatory = true;
        
        private const string _condenserPPrefix = "cim";
        
        /// Maximum reactive power limit. This is the maximum (nameplate) limit for the unit.
        private System.Single? cim_maxQ;
        
        private const bool isMaxQMandatory = true;
        
        private const string _maxQPrefix = "cim";
        
        /// Minimum reactive power limit for the unit.
        private System.Single? cim_minQ;
        
        private const bool isMinQMandatory = true;
        
        private const string _minQPrefix = "cim";
        
        public virtual float CondenserP {
            get {
                return this.cim_condenserP.GetValueOrDefault();
            }
            set {
                this.cim_condenserP = value;
            }
        }
        
        public virtual bool CondenserPHasValue {
            get {
                return this.cim_condenserP != null;
            }
        }
        
        public static bool IsCondenserPMandatory {
            get {
                return isCondenserPMandatory;
            }
        }
        
        public static string CondenserPPrefix {
            get {
                return _condenserPPrefix;
            }
        }
        
        public virtual float MaxQ {
            get {
                return this.cim_maxQ.GetValueOrDefault();
            }
            set {
                this.cim_maxQ = value;
            }
        }
        
        public virtual bool MaxQHasValue {
            get {
                return this.cim_maxQ != null;
            }
        }
        
        public static bool IsMaxQMandatory {
            get {
                return isMaxQMandatory;
            }
        }
        
        public static string MaxQPrefix {
            get {
                return _maxQPrefix;
            }
        }
        
        public virtual float MinQ {
            get {
                return this.cim_minQ.GetValueOrDefault();
            }
            set {
                this.cim_minQ = value;
            }
        }
        
        public virtual bool MinQHasValue {
            get {
                return this.cim_minQ != null;
            }
        }
        
        public static bool IsMinQMandatory {
            get {
                return isMinQMandatory;
            }
        }
        
        public static string MinQPrefix {
            get {
                return _minQPrefix;
            }
        }
    }
}
